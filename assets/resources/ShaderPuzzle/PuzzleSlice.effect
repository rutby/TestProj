// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }

        c_shape_type: { value: [0, 0, 0, 0] }
        c_uv0: { value: [0.333, 0.333] }
        c_uv1: { value: [0.666, 0.666] }
        c_corner_type: { value: 3 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;

    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform Custom {
    vec4 c_shape_type;
    vec2 c_uv0;
    vec2 c_uv1;
    float c_corner_type;
  };  

  // 圆角
  float corner(float r) {
    float radius = r / 528.;
    vec2 uv = vec2(v_uv0.x, v_uv0.y);

    // 非左上角圆
    float result0 = 1. - smoothstep(radius, radius-0.0001, length(uv - vec2(radius + c_uv0.x, radius + c_uv0.y)));
    // 非右上角圆
    float result1 = 1. - smoothstep(radius, radius-0.0001, length(uv - vec2(c_uv1.x - radius, radius + c_uv0.y)));
    // 非左下角圆
    float result2 = 1. - smoothstep(radius, radius-0.0001, length(uv - vec2(radius + c_uv0.x, c_uv1.y - radius)));
    // 非右下角圆
    float result3 = 1. - smoothstep(radius, radius-0.0001, length(uv - vec2(c_uv1.x - radius, c_uv1.y - radius)));

    float mx0 = 1. - step(radius + c_uv0.x, uv.x);
    float my0 = 1. - step(radius + c_uv0.y, uv.y);
    float mx1 = 1. - step(uv.x, c_uv1.x - radius);
    float my1 = 1. - step(uv.y, c_uv1.y - radius);

    /*
    * 1 2
    * 4 3
    */
    float lt = result0 * mx0 * my0 * step(c_corner_type, 1. + 0.1) * step(1. - 0.1, c_corner_type);
    float rt = result1 * mx1 * my0 * step(c_corner_type, 2. + 0.1) * step(2. - 0.1, c_corner_type);
    float lb = result2 * mx0 * my1 * step(c_corner_type, 4. + 0.1) * step(4. - 0.1, c_corner_type);
    float rb = result3 * mx1 * my1 * step(c_corner_type, 3. + 0.1) * step(3. - 0.1, c_corner_type);
    float l0 = step(uv.x, c_uv0.x);
    float t0 = step(uv.y, c_uv0.y);
    float r0 = step(c_uv1.x, uv.x);
    float b0 = step(c_uv1.y, uv.y);

    return clamp(1. - (lt + rt + lb + rb + l0 + t0 + r0 + b0), 0., 1.);
  }

  vec4 _shape(vec4 o, vec2 pos, float shape, float radius) {
    /*
    * 0: 无
    * 1: 凸起
    * 2: 凹陷
    */
    float type0 = step(shape, 0. + 0.1) * step(0. - 0.1, shape);
    float type1 = step(shape, 1. + 0.1) * step(1. - 0.1, shape);
    float type2 = step(shape, 2. + 0.1) * step(2. - 0.1, shape);
    
    float r1 = type1 * smoothstep(radius, radius - 0.005, length(v_uv0 - pos));
    float r2 = type2 * smoothstep(radius, radius + 0.005, length(v_uv0 - pos));

    o.a += mix(0., r1, type1);;
    o.a *= mix(1., r2, type2);
    o.a = clamp(o.a, 0., 1.);
    return o;
  }

  // 凹凸
  vec4 shape(vec4 o, float r) {
    float radius = r / 528.;

    vec2 pos0 = vec2(c_uv0.x + 0.334/2., c_uv0.y);
    vec2 pos1 = vec2(c_uv1.x, c_uv0.y + 0.334/2.);
    vec2 pos2 = vec2(c_uv0.x + 0.334/2., c_uv1.y);
    vec2 pos3 = vec2(c_uv0.x, c_uv0.y + 0.334/2.);

    o = _shape(o, pos0, c_shape_type.x, radius);
    o = _shape(o, pos1, c_shape_type.y, radius);
    o = _shape(o, pos2, c_shape_type.z, radius);
    o = _shape(o, pos3, c_shape_type.w, radius);

    return o;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);

    // 圆角
    o.a *= corner(13.);

    // 凹凸
    o = shape(o, 27.5);

    // 叠加灰度图
    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
    vec4 back = vec4(gray, gray, gray, 0.75);
    vec4 fore = vec4(o.r, o.g, o.b, 0.25);
    o.rgb = fore.rgb * 0.25 + back.rgb * 0.75;

    // 叠加颜色
    o *= v_color;

    gl_FragColor = o.rgba;
  }
}%
